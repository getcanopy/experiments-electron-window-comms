import { app, BrowserWindow, MessageChannelMain, MessageEvent, MessagePortMain } from "electron"
import { OurMessage } from "./OurMessage"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

interface WindowOptions {
  url?: string
  parentPort?: MessagePortMain
}

const createWindow = (options: WindowOptions = {}) => {
  const { url = MAIN_WINDOW_WEBPACK_ENTRY, parentPort } = options
  console.log(`creating window with url ${url} and parentPort ${parentPort}`)
  return new Promise<MessagePortMain>((resolve) => {
    const window = new BrowserWindow({
      width: 1920,
      height: 1080,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    })
    window.loadURL(url)
    const { port1: serverPort, port2: windowPort } = new MessageChannelMain()
    serverPort.on("message", handleMessage(serverPort)).start()
    window.webContents.openDevTools()
    setTimeout(() => {
      window.webContents.postMessage("setup-comms", null, [windowPort])
      if (parentPort) {
        serverPort.postMessage({ topic: "set-parent", body: {} }, [parentPort])
      }
      resolve(serverPort)
    }, 1000)
  })
}


const handleMessage = (client: MessagePortMain) => {
  return (message: MessageEvent) => {
    console.log({ recieved: message })
    const { data } = message
    const { topic, body } = data as OurMessage
    if (topic === "create-child") {
      const { url } = body
      createWindow({ url, parentPort: client }).then(childPort => {
        console.log("got child channel", childPort)
        client.postMessage({ topic: "add-child", body: { name: Math.random() } }, [childPort])
      })
      return
    }
    const response = { ...body, topic: `echo-${topic}` }
    client.postMessage(response)
  }
}
app.on("ready", () => { createWindow() })

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})
