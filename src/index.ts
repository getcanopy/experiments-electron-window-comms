import { app, BrowserWindow, MessageChannelMain, MessageEvent, MessagePortMain, ipcMain } from "electron"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

interface WindowOptions {
  url?: string
  parentPort?: MessagePortMain
}
const parents = new Map<number, MessagePortMain>()

// The preload tells the main process it's ready to upgrade to a MessagePort.
ipcMain.on("setup-comms", (event) => {
  const { sender } = event
  console.log(`got setup-comms message from ${sender.id}`)

  const { port1: serverPort, port2: windowPort } = new MessageChannelMain()

  serverPort.on("message", handleMessage(serverPort))
  sender.postMessage("setup-comms", null, [windowPort])
  serverPort.postMessage({ topic: "hi!"})
  // send the parent port to the child, if there is one
  const parent = parents.get(sender.id)
  if (parent) {
    serverPort.postMessage({ topic: "set-parent", body: { name: Math.random() } })
  }
})

const createWindow = (options: WindowOptions = {}) => {
  console.log("createWindow")
  const { url = MAIN_WINDOW_WEBPACK_ENTRY, parentPort } = options
  const window = new BrowserWindow({
    width: 1920,
    height: 1080,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  if (parentPort) {
    parents.set(window.webContents.id, parentPort)
  }
  window.loadURL(url)
  window.webContents.once("did-finish-load", () => {
    window.webContents.openDevTools()
  })
}


const handleMessage = (client: MessagePortMain) => {
  console.log("setting up message handler")
  return (message: MessageEvent) => {
    console.log({ recieved: message.data })
    // const { data } = message
    // const { topic, body } = data
    // if (topic === "create-child") {
    //   const { url } = body
    //   createWindow({ url, parentPort: client }).then(childPort => {
    //     console.log("got child channel")
    //     client.postMessage({ topic: "add-child", body: { name: Math.random() } }, [childPort])
    //   })
    //   return
    // }
    // const response = { ...body, topic: `echo-${topic}` }
    // client.postMessage(response)
  }
}
app.on("ready", () => { createWindow() })

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})
